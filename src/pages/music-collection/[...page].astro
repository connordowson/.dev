---
import BaseLayout from "@layouts/Base.astro";
import Section from "@components/Section.astro";
import { Picture } from "@astrojs/image/components";
import { Icon } from "astro-icon";

// Lazy way to remove extra details returned by Discogs API
// Like for artists with the same name as another artist, it returns "Artist (2)"
// And for albums with a deluxe edition, it returns "Album (Deluxe Edition)"

export async function getStaticPaths({ paginate }) {
  const sanitize_artist_name = (artist) => {
    return artist.replace(" (2)", "");
  };

  const sanitize_album_title = (album) => {
    return album
      .replace(" (The Platinum Pleasure Edition)", "")
      .replace(" = Etazhi", "");
  };
  const discogsCollectionUnformatted = await Astro.glob(
    "../../content/music-collection/*.json"
  );

  const discogsCollection = discogsCollectionUnformatted[0].releases.map(
    (release) => {
      return {
        id: release.id,
        title: sanitize_album_title(release.basic_information.title),
        artist: sanitize_artist_name(release.basic_information.artists[0].name),
        year: release.basic_information.year,
        cover_image: release.basic_information.cover_image,
        thumb: release.basic_information.thumb,
        genres: release.basic_information.genres,
      };
    }
  );

  // Generate pages from our array of albums, with 20 to a page
  return paginate(discogsCollection, { pageSize: 20 });
}
// All paginated data is passed on the "page" prop
const { page } = Astro.props;
const { data: albums } = page;
---

<BaseLayout title="Music collection | Connor Dowson">
  <Section fixed>
    <h1>Music collection</h1>

    <div class="prose flow">
      <p>
        My collection of music owned on vinyl. Sourced from my <a
          href="https://www.discogs.com/user/dows/collection?header=1"
          >Discogs account</a
        >.
      </p>

      <p class="pagination">
        <span>Page {page.currentPage} of {page.lastPage}</span>

        {
          page.url.prev && (
            <span>
              <a href={page.url.prev}>
                <Icon name="heroicons-solid:arrow-sm-left" />
                Previous
              </a>
            </span>
          )
        }
        {
          page.url.next && (
            <span>
              <a href={page.url.next}>
                Next
                <Icon name="heroicons-solid:arrow-sm-right" />
              </a>
            </span>
          )
        }
      </p>
      <hr />

      <div class="grid music-grid">
        {
          albums.map((album) => {
            return (
              <div class="flow">
                <Picture
                  src={album.cover_image}
                  alt={album.title}
                  widths={[190]}
                  sizes=""
                  aspectRatio="1:1"
                  background="red"
                  formats={["webp", "avif"]}
                />

                <h3>{album.title}</h3>

                <p>{album.artist}</p>
              </div>
            );
          })
        }
      </div>

      <hr />
      <p class="pagination">
        <span>Page {page.currentPage} of {page.lastPage}</span>

        {
          page.url.prev && (
            <span>
              <a href={page.url.prev}>
                <Icon name="heroicons-solid:arrow-sm-left" />
                Previous
              </a>
            </span>
          )
        }
        {
          page.url.next && (
            <span>
              <a href={page.url.next}>
                Next
                <Icon name="heroicons-solid:arrow-sm-right" />
              </a>
            </span>
          )
        }
      </p>
    </div>
  </Section>
</BaseLayout>
